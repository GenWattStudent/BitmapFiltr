name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: BitmapFiltr.sln   
      Unit_Test_Folder: tests/Filters.Unit.Tests
      Integration_Test_Folder: tests/Filters.Integration.Tests                    # Replace with your solution name, i.e. MyWpfApp.sln.
      Unit_Test_Name: tests/Filters.Unit.Tests/Filters.Unit.Tests.csproj    # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Integration_Test_Name: tests/Filters.Integration.Tests/Filters.Integration.Tests.csproj
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
    - name: Checkout 
      uses: actions/checkout@v4

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        cache: true

    - name: Restore nuget libs
      run: dotnet restore --locked-mode

    # - name: Cache .NET SDK
    #   id: cache-dotnet-sdk
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.dotnet
    #     key: dotnet-sdk-${{ runner.os }}-${{ hashFiles('global.json') }}
    #     restore-keys: |
    #       dotnet-sdk-${{ runner.os }}-
          
    # - name: Install .NET Core (if not cached)
    #   if: steps.cache-dotnet-sdk.outputs.cache-hit != 'true'
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: 8.0.x

    - name: Cache Windows SDK Installer
      id: cache-sdk
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/vs_buildtools.exe
        key: windows-sdk-${{ runner.os }}

    - name: Download Windows SDK Installer (if not cached)
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $installerPath = "$env:RUNNER_TEMP\vs_buildtools.exe"
        Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
        
    - name: Check for Windows SDK
      id: check-sdk
      shell: pwsh
      run: |
        $sdkInstalled = Test-Path "C:\Program Files (x86)\Windows Kits\10\bin"
        if ($sdkInstalled) {
          echo "SDK_INSTALLED=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        } else {
          echo "SDK_INSTALLED=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }

    - name: Install Windows SDK (if missing and in Release only)
      if: matrix.configuration == 'Release' && env.SDK_INSTALLED == 'false'
      shell: pwsh
      run: |
        $installerPath = "$env:RUNNER_TEMP\vs_buildtools.exe"
        Start-Process -Wait -FilePath $installerPath -ArgumentList `
          "--quiet", "--norestart", "--nocache", `
          "--add Microsoft.VisualStudio.Workload.WindowsBuildTools", `
          "--add Microsoft.VisualStudio.Component.Windows10SDK"

    - name: Locate signtool.exe (Release only)
      if: matrix.configuration == 'Release'
      shell: pwsh
      run: |
          # Find the latest installed SDK version
          $sdkPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" | 
            Where-Object { $_.Name -match "^10\.0\.[0-9]+\.0$" } | 
            Sort-Object Name -Descending | 
            Select-Object -First 1

          if ($sdkPath) {
              $signtoolPath = Join-Path -Path $sdkPath.FullName -ChildPath "x64\signtool.exe"
              echo "SIGNTOOL_PATH=$signtoolPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              Write-Host "signtool.exe not found!"
              exit 1
          }
      
    - name: Decode PFX Certificate (Release only)
      if: matrix.configuration == 'Release' 
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certPath = "$env:RUNNER_TEMP\SigningCertificate.pfx"
        [IO.File]::WriteAllBytes($certPath, $pfx_cert_byte)
      shell: pwsh

    # - name: Cache NuGet Packages
    #   id: cache-nuget
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.nuget/packages
    #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
    #     restore-keys: |
    #       nuget-${{ runner.os }}-

    # - name: Restore dependencies
    #   run: dotnet restore 
      
    - name: Build WPF App
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test --configuration ${{ matrix.configuration }} --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:CoverageReport -reporttypes:HtmlInline_AzurePipelines

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.configuration }}
        path: CoverageReport
      
    - name: Publish WPF App
      run: dotnet publish -c ${{ matrix.configuration }} -o publish-${{ matrix.configuration }}

    - name: Sign the artifact (Release only)
      if: matrix.configuration == 'Release'
      shell: pwsh
      run: |
        $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
        & "$signtoolPath" sign `
          /f "$env:RUNNER_TEMP\SigningCertificate.pfx" `
          /p "${{ secrets.Pfx_Password }}" `
          /tr http://timestamp.digicert.com `
          /td SHA256 `
          /fd SHA256 `
          /v `
          "$env:GITHUB_WORKSPACE\publish-Release\Filters.UI.exe"
      
    - name: Remove PFX Certificate (Release only)
      if: matrix.configuration == 'Release' 
      run: Remove-Item "$env:RUNNER_TEMP\SigningCertificate.pfx"
      shell: pwsh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: WPF-App-${{ matrix.configuration }}  
        path: publish-${{ matrix.configuration }}
